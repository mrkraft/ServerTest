// Code generated by dagger-compiler.  Do not edit.
package rio.server.handler;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<PingRequestHandler>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code PingRequestHandler} and its
 * dependencies.
 *
 * Being a {@code Provider<PingRequestHandler>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<PingRequestHandler>} and handling injection
 * of annotated fields.
 */
public final class PingRequestHandler$$InjectAdapter extends Binding<PingRequestHandler>
    implements Provider<PingRequestHandler>, MembersInjector<PingRequestHandler> {
  private Binding<rio.db.service.PingService> pingService;
  private Binding<UriHandlerBased> supertype;

  public PingRequestHandler$$InjectAdapter() {
    super("rio.server.handler.PingRequestHandler", "members/rio.server.handler.PingRequestHandler", NOT_SINGLETON, PingRequestHandler.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    pingService = (Binding<rio.db.service.PingService>) linker.requestBinding("rio.db.service.PingService", PingRequestHandler.class, getClass().getClassLoader());
    supertype = (Binding<UriHandlerBased>) linker.requestBinding("members/rio.server.handler.UriHandlerBased", PingRequestHandler.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(pingService);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<PingRequestHandler>}.
   */
  @Override
  public PingRequestHandler get() {
    PingRequestHandler result = new PingRequestHandler();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<PingRequestHandler>}.
   */
  @Override
  public void injectMembers(PingRequestHandler object) {
    object.pingService = pingService.get();
    supertype.injectMembers(object);
  }

}
